-----------------------------------------------------------------------
REQUIREMENTS
-----------------------------------------------------------------------
* Perl 5.6.1 or later

* Apache2 with mod_perl2

* Netviewer 0.29.6 or later
  A toolset for collecting data from your network devices
  Available at 
	
	http://www.nero.net/projects/netviewer/

* A DBMS supported by Perl DBI (so far, tested with MySQL only)

* A Radius server (for authentication).  We recommend FreeRadius, 
  available at:
	
	http://www.freeradius.org/
	
* The GraphViz package, available at
	
	http://www.graphviz.org/

* The following Perl modules:

	CGI
	Class::DBI
	HTML::Mason
	Apache::Session
	Apache::DBI
	URI::Escape
	DBIx::DBSchema
	DBIx::DataSource
	SNMP (from the Net-SNMP package, not Net::SNMP)
	Apache2::SiteControl
	GraphViz	

  The easiest way to install Perl modules is using the CPAN
  (Comprehensive Perl Archive Network):

	% perl -MCPAN -e shell;
	> install <Module::Name>
	
----------------------------------------------------------------------
INSTALLING THE PACKAGE FOR THE FIRST TIME
----------------------------------------------------------------------

* From the main directory do:

	% make install [parameters]

  Possible parameters include:

	PREFIX=YOUR-PREFIX (default: /usr/local/netdot) 
	APACHEUSER=USER-YOUR-APACHE-RUNS-AS (default: apache)
	APACHEGROUP=GROUP-YOUR-APACHE-RUNS-AS (default: apache)

* Then, you'll be ready to initialize the database:

	% make installdb

  where you may want to change the values of

	DB_NETDOT_USER=(default: netdot_user)
	DB_NETDOT_PASS=(default: netdot_pass)

  in *bin/Makefile*.

----------------------------------------------------------------------
UPGRADING
----------------------------------------------------------------------

It is possible that there exist DB schema changes between your current 
installation and the version you plan to install. It is highly recommended 
that you back up your existing database.  mysqldump is one option for MySQL 
    installations (e.g.):

	% mysqldump netdot >netdot-bak.sql

After you have made backups of your database, from the main directory, do:

	% make upgrade [parameters]

This will modify the schema for you and will try to adapt your current data
to the new structures.

[parameters] are the same ones you used when you first installed
(explained above)

----------------------------------------------------------------------
APACHE CONFIGURATION
----------------------------------------------------------------------

* Edit the supplied template etc/netdot_apache2_radius.conf copy it to
  your apache config dir and and include it somewhere in your 
  Apache config (e.g.):

	Include conf/netdot_apache2_radius.conf	


* Edit lib/Netdot/Mason.pm to your needs.  
  Pay attention to the Apache2-only directives, and also the paths.

  In particualar you will need to change some paths if you didn't
  install netdot in /usr/local/netdot (i.e. you specified a custom
  PREFIX).


----------------------------------------------------------------------
NETDOT CONFIGURATION
----------------------------------------------------------------------

Netdot comes with a configuration file that you need to customize
to your needs.  This file is a Perl hash structure.

* Make a copy of 
	/YOUR-PREFIX/etc/Default.conf
  and call it
	/YOUR-PREFIX/etc/Site.conf

Netdot will first read Default.conf and then Site.conf.  Any 
changes you make in Site.conf will take effect in the next 
Apache restart.

The reason for keeping two files is that when an upgrade is performed, 
the Default.conf can be re-written (to add new variables, etc.), without 
overwriting your site-specific configuration.


----------------------------------------------------------------------
ACTIVATING SCRIPTS
----------------------------------------------------------------------

Netdot comes with a few scripts that can be run periodically as cron jobs.
For example:
 * Devices should be re-discovered via SNMP frequently to maintain an accurate 
   list of ports, ip addresses, etc.

 * Netdot keeps history records for some objects every time they are updated.
   With time, old history should be deleted from the database to save disk space.

 * Netdot can generate text documentation that is easy to find via simple
   grepping commands, for example, information about people, locations, 
   device port assignments, etc.  This documentation should be kept up to
   date by exporting it frequently.

 * Configurations for external programs can be generated using Netdot data.
   Current supported programs include: Nagios, Sysmon and Rancid.
   

Below is a recommended crontab file.

#################################################################################
# Sample Crontab file - customize to your needs
#################################################################################

# Rediscover all devices in the db
#
0 0 * * * perl /usr/local/netdot/bin/updatedevices.pl -avdm

#
# Prune DB of old history items (once a month)
0 4 1 * * perl /usr/local/netdot/bin/prune_db.pl -v -m 12 -n 100 -e

# Generate text documentation and configuration files for external programs
# (Nagios, Sysmon, Rancid, etc)
0 16 * * * cd /usr/local/netdot/export; /usr/bin/make Makefile all 
5 16 * * * cd /usr/local/netdot/export; /usr/bin/make Makefile install

#
# Check for orphan devices (devices with no Site, no Entity, no dependencies)
#
30 3 * * * perl /usr/local/netdot/bin/chk_orphans.pl -edsm

# Dump the database once a day and copy it to a remote host
0 6 * * * perl /usr/local/netdot/export/dump-db.pl --db netdot --dbtype mysql --dbpass netdot_pass  --host backup-host --user jdoe --dir /home/jdoe/netdot_data --key /home/jdoe/.ssh/id_dsa
# Keep a few copies locally
0 7 * * * find /root -name "hostname*" -ctime +5 -exec rm -f '{}' ';'

