#!/usr/bin/perl
#
# This script builds grep'able text files to allow users 
# to look up device information quickly from the command
# line
# 
#
use strict;
use lib "<<Make:LIB>>";
use Netdot::UI;
use Data::Dumper;
use Getopt::Long;

use vars qw( %self $USAGE @device_types);

&set_defaults();

my $USAGE = <<EOF;
usage: $0 --dir <DIR> --suffix <STRING>

    --dir             <path> Path to configuration file
    --suffix          <string> String to append to the Device Type when naming files (default: $self{suffix})
    --debug           Print debugging output
    --help            Display this message

EOF

&setup();
&gather_data();
&build_configs();


##################################################
sub set_defaults {
    %self = ( 
	      dir             => '',
	      suffix          => '-devices.txt',
	      help            => 0,
	      debug           => 0, 
	      );
}

##################################################
sub setup{
    
    my $result = GetOptions( 
			     "dir=s"            => \$self{dir},
			     "suffix=s"         => \$self{suffix},
			     "debug"            => \$self{debug},
			     "h"                => \$self{help},
			     "help"             => \$self{help},
			     );
    
    if( ! $result || $self{help} ) {
	print $USAGE;
	exit 0;
    }

    unless ( $self{dir} && $self{suffix} ) {
	print "ERROR: Missing required arguments\n";
	die $USAGE;
    }
}

##################################################
sub gather_data{

    unless ( @device_types = ProductType->retrieve_all() ){
	die "No ProductType elements found\n";
    }
    
}

##################################################
sub build_configs{

    foreach my $dt ( @device_types ){
	my $filename = $dt->name.$self{suffix};
	$filename =~ s/\s+/-/g;
	$filename = lc($filename);
	$filename = $self{dir}."/".$filename;
	my @devices;
	foreach my $product ( $dt->products ){
	    my $name = $product->name;
	    if ( my @devs = $product->devices ){
		print "Found ", scalar @devs, " $name devices\n" if $self{debug};
		push @devices, @devs;
	    }
	}
	next unless ( @devices );

	open (FILE, ">$filename") 
	    or die "Couldn't open $filename: $!\n";
	select (FILE);

	print "            ****        THIS FILE WAS GENERATED FROM A DATABASE         ****\n";
	print "            ****           ANY CHANGES YOU MAKE WILL BE LOST            ****\n";
	print "\n  Generated by $0 on ", scalar(localtime), "\n\n\n";
	
	foreach my $o ( sort { $a->name->name cmp $b->name->name } @devices ){
	    my $name = $o->name->name;
	    if ( $o->name->zone ){
		my $fqdn = $o->name->zone->mname;
		print $name, " -- FQDN: $fqdn\n" if $fqdn;
	    }
	    print $name, " -- Building: ", $o->site->name, "\n";
	    print $name, " -- Room:", $o->room, "\n" if ( $o->room );
	    print $name, " -- Rack:", $o->rack, "\n" if ( $o->rack );
	    if ( $o->productname ){
		print $name, " -- Model: ", $o->productname->name, "\n";
		if ( $o->productname->manufacturer ){
		    print $name, " -- Manufacturer: ", $o->productname->manufacturer->name, "\n";
		}
	    }
	    print $name, " -- s/n: ", $o->serialnumber, "\n" if ( $o->serialnumber );
	    my $info = $o->info;
	    $info  =~ s/\n/\n$name -- Info: /g;
	    $info  =~ s/\r//g;  
	    print "$name -- Info: $info\n";
	    
	    foreach my $p ( sort { $a->number <=> $b->number } $o->interfaces ){
		my $descr = $p->description;
		$descr  =~ s/\n//g;
		my $link;
		if ( my $parentdep = ($p->parents)[0] ){
		    if ( $parentdep->parent->device && $parentdep->parent->device->name 
			 && $parentdep->parent->device->name->name ){
			my $port = $parentdep->parent->number . "." . $parentdep->parent->name;
			$link = "uplink: " .  $parentdep->parent->device->name->name . ".[$port]";
		    }
		}elsif ( my $childdep = ($p->children)[0] ){
		    if ( $childdep->child->device && $childdep->child->device->name
			 && $childdep->child->device->name->name ){
			my $port = $childdep->child->number . "." . $childdep->child->name;
			$link = "downlink: " .  $childdep->child->device->name->name . ".[$port]";
		    }
		}
		# Try to use actual jack and room object info.  If not, just use device's text ones
		my ($jack, $room);
		if ( $p->jack != 0 ){
		    $jack = $p->jack->jackid;
		    if ( $p->jack->room ){
			$room = $p->jack->room->name;
		    }else{
			$room = $p->room_char;
		    }
		}else{
		    $jack = $p->jack_char;
		    $room = $p->room_char;
		}
		print $name, ", port ", $p->number, ", ", $p->name, ", ", $room, ", ", $jack, ", $descr",
		", ", $link, "\n";
	    }
	    print "\n";
	}
	close (FILE) or warn "$filename did not close nicely\n";
    }

}
