$Header: /home/netdot/src/RCS/TODO,v 1.8 2003/07/09 21:32:19 netdot Exp $
======================================================================


 * Insert Meta information into the database
   status: DONE
   This includes (table)name, columnOrder, linksTo (has_a), linksFrom
   (has_many), and mainObject.

 * a generalized sorting component to present search results in
   status: DONE
   sf is working on this right now; proof-of-concept is done. see
   sortresults.html. 

 * general search
   status: MOSTLY DONE
   This is partly done, but for now is waiting on the component to
   properly sort and present results.

   This still needs the following:
   - DONE -- search the linksto/has_a relationships
   - DONE -- break up multi word searches 
     eg. 'computing center' => 'computing' & 'center'
   - DONE -- aliases 
     at&t is also known as att.  
     wou is also known as western oregon university.
   - specific table searches ?
     specify which table to search

 * update
   status: DONE.
   Also, a 'before_update' trigger was added to Netdot::DBI
   to keep modified objects in a history table

 * browse
   status: (sf?)

 * create
   status: TESTING
   Much of the work is now done.  Some minor bugs still remain, but
   all of the functionaltiy is there.  Does actual insertions and
   navigation is correct.

 * delete
   status: DONE
   Problem: We need to somehow specify whether items with has_many relationships should
   be restricted from deletion or if they should be deleted along with all their dependent
   items.  Ideally, this should be specified at installation time and at the middleware layer.
   Users shouldn't be given these options.
   - Problem was solved patching Class::DBI to allow on_delete behavior to be defined for 
   has_many relationships.

 * Access control
   status: DONE
   - Basic access control added to the httpd daemon

 * Discovery of Nodes
   status: PENDING
   Information about Nodes and Interfaces should be fetched and updated via SNMP.

 * history tables
   status: DONE
   A before_update trigger makes a copy of the current object in its history table.
   History tables exist where they make sense.

 * timestamps
   status: DONE
   The history table includes a timestamp as well as who modified the object.
