######################################################################
#
# Categories that can be collected.
#
# A category is defined as a single word opening a subsection at the 
# top-level.  You can then define snmp variables to fetch and update 
# an RRD with and, optionally, DS names for the variable to be known as
# in the RRD file.  You then have to specify some metadata concerning
# the category so that NetViewer can properly gather information and set
# everything up (eg RRD files, netviewer configurations) for a category
# on a given device.  Special top-level categories are 'general' 
# (information general to a device), 'locale' (aggregation of data from 
# multpile sources into one RRD), and 'vars' (definition of SNMP variables,
# including OID, TYPE, and highcounter counterpart).
#
# For more information, please see the relevant documentation concerning
# this file. The following is a reminder of what can be specified in
# a category subsection:
#
#    interval   <minutes>  
#    cftype     [avg|max|min] -- colon separated list of avg, max, and/or min.
#    descr      [ $<snmpvar> | "<category description>" ]
#    alias      "<string description>" -- alternative name for category to
#                                         use when creating a filename
#    aux        $<snmpvar>    -- auxiliary snmp variable(s) to fetch
#                                not valid with category table
#    instance   [ <instance> | null ]  -- category has only one instance
#    table      $<snmpvar>    -- walk table for both discovery and updates
#    tablesize  [0-9]+        -- number of DS to create and update RRDs with
#                                only to be used with table
#    map        $<snmpvar>    -- walk table to discover all category instances
#    key        [ value | instance | <category name> ]
#    append     [0-9\.]+      -- append to instance value 
#    test       { <expr> }    -- <expr> must evaluate to true or false
#    highcounter  "yes"       -- category variables may have highcounter
#                                variable counterparts 
#
# For vars top-level block:
#
#    highcounter <variable>   -- <variable> is the 64bit variable of
#                                a 32bit variable
#    oid         <oid>        -- the oid of a particular snmp variable
#    type        <type>       -- the DS type of this variable
#
# Remember: 
#  * String descriptions must be bound by quote marks; eg " ... "
#  * snmp variable names must begin with a $; eg. $ifAlias
#  * you can append '.inst' to a snmp variable to refer to a specific
#    instance when walking a table (with map) or that stipulated by 
#    'instance' key. eg. $ifAlias.inst
#  * $var1.$var2=$var3.inst
#    This is special syntax that allows you to create a complex
#    expression to discover a value.  It reads from right to left:
#      - the value of $var3.inst is looked up
#      - an instance of $var2 with the same value is searched for
#      - that instance (if discovered) is then appended to $var1
#      - the value of $var1.inst is the looked up
#    The key here is that $var2 has a different instance number than 
#    $var3.  However, they both have the same value.
#  * map, table, and instance are mutually exclusive.
#  * map requires that key is defined
#  * table requires tablesize to be defined
#
#
# 'general', 'locale', and 'vars' are really pseudo-categories.  
# 'general' is for vars general to a device (eg. sysLocation).
# 'locale' is for locale collection.
#  Since neither category is collected, they do not have the usual 
#  category metadata.
#
# For locale section, remember that you should refer to the DS name of
# the variable you are collecting, not it's mib name.

cviRoutedVlan {
   interval 5 ;
   aux {
#       $vtpVlanName.1.$cviRVlanIfIndex=$cviRVlanIfIndex.inst ;
   }
   cftype avg:max ;
   collect yes ;
   descr "Cisco Routed VLAN" ;
   key value ;
   map  $cviRVlanIfIndex ;
   vars {
       cviRVlanIfIndex ;
   }
}
general {
   vars {
      dot1dBaseBridgeAddress ;
      sysDescr ;
      sysLocation ;
      sysName ;
      sysObjectID ;
      entPhysicalSerialNum ;
      ipForwarding ;
  }
}
hubPorts {
   descr $rptrPortIndex ;
   cftype avg:max ;
   collect yes ;
   map $rptrPortIndex ;
   key instance ;
   interval 5 ;
   aux $rptrPortGroupIndex ;
   vars {
      rptrPortRdblOctets ;
   }
}
interface {
   alias IF ;
   aux {
      $ifAdminStatus.inst ;
      $ifSpeed.inst ;
      $ifType.inst ;
      $ifPhysAddress.inst ;
      $dot1qPvid.inst ;
      $hpVlanMemberIndex.inst ;
      $vmVlan.inst ;
      $ifSpecific.inst ;
#      $ifMauType.inst.1 ;
#      $hpVlanIdentName.$hpVlanDot1QID=$hpVlanMemberIndex.inst ;
#      $dot1qVlanStaticName.$dot1qPvid=$dot1qPvid.inst ;
#      $portDuplex.$portIfIndex=$ifIndex.inst ;
   }
   cftype avg:max ;
   collect yes ;
   descr $ifAlias.inst ;
   highcounter yes ;
   interval 5 ;
   key value ;
   map $ifDescr ;
   test "{ $ifType.inst != 24 && $ifType.inst != 18 && ! ( $portIfIndex.$portIfIndex=$ifIndex.inst && $ipForwarding == 2 )  }" ;
   vars {
      ifInDiscards ;
   }
}
interfaceCatalyst {
   alias IF ;
   aux {
      $ifAdminStatus.inst ;
      $ifSpeed.inst ;
      $ifType.inst ;
   }
   cftype avg:max ;
   collect yes ;
   descr $portName.$portIfIndex=$ifIndex.inst ;
   highcounter yes ;
   interval 5 ;
   key value ;
   map $ifName ;
   test "{ $ifType.inst != 24 && $ifType.inst != 18 &&  $portIfIndex.$portIfIndex=$ifIndex.inst && $ipForwarding == 2  }" ;
   vars {
      ifInDiscards ;
   }
}
vars {
   7200TempStVal_1 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.1 ;
      type GAUGE ;
   }
   7200TempStVal_2 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.2 ;
      type GAUGE ;
   }
   7200TempStVal_3 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.3 ;
      type GAUGE ;
   }
   7200TempStVal_4 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.4 ;
      type GAUGE ;
   }
   7200VoltageStVal_1 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.1 ;
      type GAUGE ;
   }
   7200VoltageStVal_2 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.2 ;
      type GAUGE ;
   }
   7200VoltageStVal_3 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.3 ;
      type GAUGE ;
   }
   7200VoltageStVal_4 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.4 ;
      type GAUGE ;
   }
   7500TempStVal_1 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.1 ;
      type GAUGE ;
   }
   7500TempStVal_2 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.2 ;
      type GAUGE ;
   }
   7500TempStVal_3 {
      oid 1.3.6.1.4.1.9.9.13.1.3.1.3.3 ;
      type GAUGE ;
   }
   7500VoltageStVal_1 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.1 ;
      type GAUGE ;
   }
   7500VoltageStVal_2 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.2 ;
      type GAUGE ;
   }
   7500VoltageStVal_3 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.3 ;
      type GAUGE ;
   }
   7500VoltageStVal_4 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.4 ;
      type GAUGE ;
   }
   7500VoltageStVal_5 {
      oid 1.3.6.1.4.1.9.9.13.1.2.1.3.5 ;
      type GAUGE ;
   }
   avgBusy5 {
      oid 1.3.6.1.4.1.9.2.1.58 ;
      type GAUGE ;
   }
   bgpLocalAs {
      oid 1.3.6.1.2.1.15.2.0 ;
      type INTEGER ;
   }
   bgpPeerFsmEstbTrans {
      oid 1.3.6.1.2.1.15.3.1.15 ;
      type COUNTER ;
   }
   bgpPeerIdentifier {
      oid 1.3.6.1.2.1.15.3.1.1 ;
      type IPADDRESS ;
   }
   bgpPeerInTotalMsgs {
      oid 1.3.6.1.2.1.15.3.1.12 ;
      type COUNTER ;
   }
   bgpPeerInUpdElapTim {
      oid 1.3.6.1.2.1.15.3.1.24 ;
      type GAUGE ;
   }
   bgpPeerInUpdates {
      oid 1.3.6.1.2.1.15.3.1.10 ;
      type COUNTER ;
   }
   bgpPeerOutTotalMsgs {
      oid 1.3.6.1.2.1.15.3.1.13 ;
      type COUNTER ;
   }
   bgpPeerOutUpdates {
      oid 1.3.6.1.2.1.15.3.1.11 ;
      type COUNTER ;
   }
   bgpPeerRemoteAs {
      oid 1.3.6.1.2.1.15.3.1.9 ;
      type INTEGER ;
   }
   bufferElFree {
      oid 1.3.6.1.4.1.9.2.1.9 ;
      type GAUGE ;
   }
   cHsrpGrpVirtualIpAddr {
      oid 1.3.6.1.4.1.9.9.106.1.2.1.1.11 ;
      type IPADDRESS ;
   }
   ccarConfigAccIdx {
      oid 1.3.6.1.4.1.9.9.113.1.1.1.1.4 ;
      type INTEGER ;
   }
   ccarConfigRate {
      oid 1.3.6.1.4.1.9.9.113.1.1.1.1.5 ;
      type GAUGE ;
   }
   ccarConfigType {
      oid 1.3.6.1.4.1.9.9.113.1.1.1.1.3 ;
      type INTEGER ;
   }
   ccarStatCurBurst {
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.5 ;
      type GAUGE ;
   }
   ccarStatFilteredByt {
      highcounter ccarStatHCFilteredByt ;
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.4 ;
      type COUNTER ;
   }
   ccarStatFilteredPkt {
      highcounter ccarStatHCFilteredPkt ;
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.3 ;
      type COUNTER ;
   }
   ccarStatHCFilteredByt {
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.13;
      type COUNTER;
   }
   ccarStatHCFilteredPkt { 
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.12;
      type COUNTER;
   }
   ccarStatHCSwitchedByt { 
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.11;
      type COUNTER;
   } 
   ccarStatHCSwitchedPkt { 
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.10;
      type COUNTER;
   }
   ccarStatSwitchedByt {
      highcounter ccarStatHCSwitchedByt ;
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.2 ;
      type COUNTER ;
   }
   ccarStatSwitchedPkt {
      highcounter ccarStatHCSwitchedPkt ;
      oid 1.3.6.1.4.1.9.9.113.1.2.1.1.1 ;
      type COUNTER ;
   }
   cfrCirDropPktsOuts {
      oid 1.3.6.1.4.1.9.9.49.1.2.1.1.3 ;
      type COUNTER ;
   }
   cfrCircuitDEins {
      oid 1.3.6.1.4.1.9.9.49.1.2.1.1.1 ;
      type COUNTER ;
   }
   cfrCircuitDEouts {
      oid 1.3.6.1.4.1.9.9.49.1.2.1.1.2 ;
      type COUNTER ;
   }
   cfrExtCircuitIfName {
      oid 1.3.6.1.4.1.9.9.49.1.2.2.1.1 ;
      type STRING ;
   }
   cfrExtCircuitSubifIndex {
      oid 1.3.6.1.4.1.9.9.49.1.2.2.1.3 ;
      type INTEGER ;
   }
   chassisModel {
      oid 1.3.6.1.4.1.9.5.1.2.16 ;
      type STRING ;
   }
   chassisSysType {
      oid 1.3.6.1.4.1.9.5.1.2.1 ;
      type INTEGER ;
   }
   cipMacSwitchedByt {
      oid 1.3.6.1.4.1.9.9.84.1.2.1.1.4 ;
      type COUNTER ;
   }
   cipMacSwitchedPkt {
      oid 1.3.6.1.4.1.9.9.84.1.2.1.1.3 ;
      type COUNTER ;
   }
   cipPrecSwitchedByt {
      oid 1.3.6.1.4.1.9.9.84.1.1.1.1.4 ;
      type COUNTER ;
   }
   cipPrecSwitchedBytes {
      oid 1.3.6.1.4.1.9.9.84.1.1.1.1.4 ;
      type COUNTER ;
   }
   cipPrecSwitchedPkt {
      oid 1.3.6.1.4.1.9.9.84.1.1.1.1.3 ;
      type COUNTER ;
   }
   ciscoImageString {
      oid 1.3.6.1.4.1.9.9.25.1.1.1.2 ;
      type STRING ;
   }
   ciscoMemoryPoolName {
      oid 1.3.6.1.4.1.9.9.48.1.1.1.2 ;
      type STRING ;
   }
   cpmCPUTotal5min {
      oid 1.3.6.1.4.1.9.9.109.1.1.1.1.5 ;
      type GAUGE ;
   }
   cpmCPUTotal5min_1 {
      oid 1.3.6.1.4.1.9.9.109.1.1.1.1.5.1 ;
      type GAUGE ;
   }
   cpmCPUTotal5min_2 {
      oid 1.3.6.1.4.1.9.9.109.1.1.1.1.5.2 ;
      type GAUGE ;
   }
   cviRVlanIfIndex {
      oid  1.3.6.1.4.1.9.9.128.1.1.1.1.3 ;
      type INTEGER ;
   } 
   dot1dBaseBridgeAddress {
      oid 1.3.6.1.2.1.17.1.1.0 ;
      type MACADDRESS ;
   }
   dot1qPvid  {
      oid 1.3.6.1.2.1.17.7.1.4.5.1.1 ;
      type GAUGE ;
   }
   dot1qVlanStaticName  {
      oid 1.3.6.1.2.1.17.7.1.4.3.1.1 ;
      type STRING ;
   }
   dsx1IfIndex {
      oid 1.3.6.1.2.1.10.18.6.1.2 ;
      type INTEGER ;
   }
   dsx1IntervalBESs {
      oid 1.3.6.1.2.1.10.18.8.1.10 ;
      type GAUGE ;
   }
   dsx1IntervalCSSs {
      oid 1.3.6.1.2.1.10.18.8.1.7 ;
      type GAUGE ;
   }
   dsx1IntervalDMs {
      oid 1.3.6.1.2.1.10.18.8.1.11 ;
      type GAUGE ;
   }
   dsx1IntervalESs {
      oid 1.3.6.1.2.1.10.18.8.1.3 ;
      type GAUGE ;
   }
   dsx1IntervalLCVs {
      oid 1.3.6.1.2.1.10.18.8.1.12 ;
      type GAUGE ;
   }
   dsx1IntervalLESs {
      oid 1.3.6.1.2.1.10.18.8.1.9 ;
      type GAUGE ;
   }
   dsx1IntervalPCVs {
      oid 1.3.6.1.2.1.10.18.8.1.8 ;
      type GAUGE ;
   }
   dsx1IntervalSEFSs {
      oid 1.3.6.1.2.1.10.18.8.1.5 ;
      type GAUGE ;
   }
   dsx1IntervalSESs {
      oid 1.3.6.1.2.1.10.18.8.1.4 ;
      type GAUGE ;
   }
   dsx1IntervalUASs {
      oid 1.3.6.1.2.1.10.18.8.1.6 ;
      type GAUGE ;
   }
   dsx1LineIndex {
      oid 1.3.6.1.2.1.10.18.6.1.1 ;
      type INTEGER ;
   }
   dsx3IfIndex {
      oid 1.3.6.1.2.1.10.30.5.1.2 ;
      type INTEGER ;
   }
   dsx3IntervalCCVs {
      oid 1.3.6.1.2.1.10.30.7.1.10 ;
      type GAUGE ;
   }
   dsx3IntervalCESs {
      oid 1.3.6.1.2.1.10.30.7.1.11 ;
      type GAUGE ;
   }
   dsx3IntervalCSESs {
      oid 1.3.6.1.2.1.10.30.7.1.12 ;
      type GAUGE ;
   }
   dsx3IntervalLCVs {
      oid 1.3.6.1.2.1.10.30.7.1.7 ;
      type GAUGE ;
   }
   dsx3IntervalLESs {
      oid 1.3.6.1.2.1.10.30.7.1.9 ;
      type GAUGE ;
   }
   dsx3IntervalPCVs {
      oid 1.3.6.1.2.1.10.30.7.1.8 ;
      type GAUGE ;
   }
   dsx3IntervalPESs {
      oid 1.3.6.1.2.1.10.30.7.1.3 ;
      type GAUGE ;
   }
   dsx3IntervalPSESs {
      oid 1.3.6.1.2.1.10.30.7.1.4 ;
      type GAUGE ;
   }
   dsx3IntervalSEFSs {
      oid 1.3.6.1.2.1.10.30.7.1.5 ;
      type GAUGE ;
   }
   dsx3IntervalUASs {
      oid 1.3.6.1.2.1.10.30.7.1.6 ;
      type GAUGE ;
   }
   dsx3LineIndex {
      oid 1.3.6.1.2.1.10.30.5.1.1 ;
      type INTEGER ;
   }
   entPhysicalSerialNum {
      oid 1.3.6.1.2.1.47.1.1.1.1.11.1 ;
      type STRING ;
   }
   esPointValueIntHum1 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.2.3.1 ;
      type GAUGE ;
   }
   esPointValueIntHum2 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.3.3.1 ;
      type GAUGE ;
   }
   esPointValueIntHum3 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.6.3.1 ;
      type GAUGE ;
   }
   esPointValueIntHum4 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.4.3.1 ;
      type GAUGE ;
   }
   esPointValueIntTmp1 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.2.1.1 ;
      type GAUGE ;
   }
   esPointValueIntTmp2 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.3.1.1 ;
      type GAUGE ;
   }
   esPointValueIntTmp3 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.6.1.1 ;
      type GAUGE ;
   }
   esPointValueIntTmp4 {
      oid 1.3.6.1.4.1.3052.4.1.1.1.1.6.4.1.1 ;
      type GAUGE ;
   }
   frCircuitIfIndex {
      oid 1.3.6.1.2.1.10.32.2.1.1 ;
      type INTEGER ;
   }
   frCircuitRcvdBECNs {
      oid 1.3.6.1.2.1.10.32.2.1.5 ;
      type COUNTER ;
   }
   frCircuitRcvdFECNs {
      oid 1.3.6.1.2.1.10.32.2.1.4 ;
      type COUNTER ;
   }
   frCircuitRcvdFrames {
      oid 1.3.6.1.2.1.10.32.2.1.8 ;
      type COUNTER ;
   }
   frCircuitRcvdOctets {
      oid 1.3.6.1.2.1.10.32.2.1.9 ;
      type COUNTER ;
   }
   frCircuitSentFrames {
      oid 1.3.6.1.2.1.10.32.2.1.6 ;
      type COUNTER ;
   }
   frCircuitSentOctets {
      oid 1.3.6.1.2.1.10.32.2.1.7 ;
      type COUNTER ;
   }
   freeMem {
      oid 1.3.6.1.4.1.9.2.1.8 ;
      type GAUGE ;
   }
   hpSwitchCpuStat {
      oid 1.3.6.1.4.1.11.2.14.11.5.1.9.6.1 ;
      type GAUGE ;
   }
   hpVlanDot1QID {
      oid 1.3.6.1.4.1.11.2.14.11.5.1.3.1.1.4.1.5 ;  
      type INTEGER ;
   }
   hpVlanIdentName  {
      oid 1.3.6.1.4.1.11.2.14.11.5.1.3.1.1.4.1.2 ;  
      type STRING ;
   }
   hpVlanMemberIndex {
      oid 1.3.6.1.4.1.11.2.14.11.5.1.3.1.1.5.1.2 ;  
      type INTEGER ;
   }
   ifAdminStatus {
      oid 1.3.6.1.2.1.2.2.1.7 ;
      type INTEGER ;
   }
   ifAlias {
      oid 1.3.6.1.2.1.31.1.1.1.18 ;
      type STRING ;
   }
   ifDescr {
      oid 1.3.6.1.2.1.2.2.1.2 ;
      type STRING ;
   }
   ifHCInOctets {
      oid 1.3.6.1.2.1.31.1.1.1.6;
      type COUNTER;
   }
   ifHCInUcastPkts {
      oid 1.3.6.1.2.1.31.1.1.1.7;
      type COUNTER;
   }
   ifHCOutOctets {
      oid 1.3.6.1.2.1.31.1.1.1.10;
      type COUNTER;
   }
   ifHCOutUcastPkts {
      oid 1.3.6.1.2.1.31.1.1.1.11;
      type COUNTER;
   }
   ifInDiscards {
      oid 1.3.6.1.2.1.2.2.1.13 ;
      type COUNTER ;
   }
   ifInErrors {
      oid 1.3.6.1.2.1.2.2.1.14 ;
      type COUNTER ;
   }
   ifInNUcastPkts {
      oid 1.3.6.1.2.1.2.2.1.12 ;
      type COUNTER ;
   }
   ifInOctets {
      highcounter ifHCInOctets ;
      oid 1.3.6.1.2.1.2.2.1.10 ;
      type COUNTER ;
   }
   ifInUcastPkts {
      highcounter ifHCInUcastPkts ;
      oid 1.3.6.1.2.1.2.2.1.11 ;
      type COUNTER ;
   }
   ifIndex {
      oid 1.3.6.1.2.1.2.2.1.1 ;
      type INTEGER ;
   }
   ifName {
      oid 1.3.6.1.2.1.31.1.1.1.1 ;
      type STRING ;
   }
   ifNumber {
      oid 1.3.6.1.2.1.2.1.0 ;
      type INTEGER ;
   }
   ifPhysAddress {
      oid  1.3.6.1.2.1.2.2.1.6;
      type STRING ;
   }
   ifOutDiscards {
      oid 1.3.6.1.2.1.2.2.1.19 ;
      type COUNTER ;
   }
   ifOutErrors {
      oid 1.3.6.1.2.1.2.2.1.20 ;
      type COUNTER ;
   }
   ifOutNUcastPkts {
      oid 1.3.6.1.2.1.2.2.1.18 ;
      type COUNTER ;
   }
   ifOutOctets {
      highcounter ifHCOutOctets ;
      oid 1.3.6.1.2.1.2.2.1.16 ;
      type COUNTER ;
   }
   ifOutUcastPkts {
      highcounter ifHCOutUcastPkts ;
      oid 1.3.6.1.2.1.2.2.1.17 ;
      type COUNTER ;
   }
   ifSpecific {
      oid .1.3.6.1.2.1.2.2.1.22 ;
      type STRING ;
   }
   ifSpeed {
      oid 1.3.6.1.2.1.2.2.1.5 ;
      type GAUGE ;
   }
   ifMauType {
      oid .1.3.6.1.2.1.26.2.1.1.3 ;
      type STRING ;
   }
   ifType {
      oid 1.3.6.1.2.1.2.2.1.3 ;
      type INTEGER ;
   }
   ipAdEntAddr {
      oid 1.3.6.1.2.1.4.20.1.1 ;
      type IPADDRESS ;
   }
   ipAdEntIfIndex {
      oid 1.3.6.1.2.1.4.20.1.2 ;
      type INTEGER ;
   }
   ipAdEntNetMask {
      oid 1.3.6.1.2.1.4.20.1.3 ;
      type IPADDRESS ;
   }
   ipForwarding {
      oid 1.3.6.1.2.1.4.1.0 ;
      type INTEGER ;
   }
   jnxFWCounterDisplayName {
      oid 1.3.6.1.4.1.2636.3.5.2.1.7;
      type STRING;
   }
   jnxFWCntrPktCount {
      oid 1.3.6.1.4.1.2636.3.5.2.1.4;
      type COUNTER;
   }
   jnxFWCntrBytCount {
      oid 1.3.6.1.4.1.2636.3.5.2.1.5; 
      type COUNTER;
   }
   jnxOpBuffer_FEB {
      oid 1.3.6.1.4.1.2636.3.1.13.1.11.6.1.0.0 ;
      type GAUGE ;
   }
   jnxOpBuffer_FPC_0 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.11.7.1.0.0 ;
      type GAUGE ;
   }
   jnxOpBuffer_FPC_1 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.11.7.2.0.0 ;
      type GAUGE ;
   }
   jnxOpBuffer_RE {
      oid 1.3.6.1.4.1.2636.3.1.13.1.11.9.1.0.0 ;
      type GAUGE ;
   }
   jnxOpCPU_FEB {
      oid 1.3.6.1.4.1.2636.3.1.13.1.8.6.1.0.0 ;
      type GAUGE ;
   }
   jnxOpCPU_FPC_0 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.8.7.1.0.0 ;
      type GAUGE ;
   }
   jnxOpCPU_FPC_1 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.8.7.2.0.0 ;
      type GAUGE ;
   }
   jnxOpCPU_RE {
      oid 1.3.6.1.4.1.2636.3.1.13.1.8.9.1.0.0 ;
      type GAUGE ;
   }
   jnxOpHeap_FEB {
      oid 1.3.6.1.4.1.2636.3.1.13.1.12.6.1.0.0 ;
      type GAUGE ;
   }
   jnxOpHeap_FPC_0 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.12.7.1.0.0 ;
      type GAUGE ;
   }
   jnxOpHeap_FPC_1 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.12.7.2.0.0 ;
      type GAUGE ;
   }
   jnxOpHeap_RE {
      oid 1.3.6.1.4.1.2636.3.1.13.1.12.9.1.0.0 ;
      type GAUGE ;
   }
   jnxOpISR_FEB {
      oid 1.3.6.1.4.1.2636.3.1.13.1.9.6.1.0.0 ;
      type GAUGE ;
   }
   jnxOpISR_FPC_0 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.9.7.1.0.0 ;
      type GAUGE ;
   }
   jnxOpISR_FPC_1 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.9.7.2.0.0 ;
      type GAUGE ;
   }
   jnxOpISR_RE {
      oid 1.3.6.1.4.1.2636.3.1.13.1.9.9.1.0.0 ;
      type GAUGE ;
   }
   jnxOpTemp_FEB {
      oid 1.3.6.1.4.1.2636.3.1.13.1.7.6.1.0.0 ;
      type GAUGE ;
   }
   jnxOpTemp_FPC_0 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.7.7.1.0.0 ;
      type GAUGE ;
   }
   jnxOpTemp_FPC_1 {
      oid 1.3.6.1.4.1.2636.3.1.13.1.7.7.2.0.0 ;
      type GAUGE ;
   }
   jnxOpTemp_RE {
      oid 1.3.6.1.4.1.2636.3.1.13.1.7.9.1.0.0 ;
      type GAUGE ;
   }
   jnxOperatingBuffer {
      oid 1.3.6.1.4.1.2636.3.1.13.1.11 ;
      type GAUGE ;
   }
   jnxOperatingCPU {
      oid 1.3.6.1.4.1.2636.3.1.13.1.8 ;
      type GAUGE ;
   }
   jnxOperatingDescr {
      oid 1.3.6.1.4.1.2636.3.1.13.1.5 ;
      type STRING ;
   }
   jnxOperatingTemp {
      oid 1.3.6.1.4.1.2636.3.1.13.1.7 ;
      type GAUGE ;
   }
   jnxRpfStatsBytes {
      oid 1.3.6.1.4.1.2636.3.17.1.1.1.4 ;
      type COUNTER ;
   }
   jnxRpfStatsPackets {
      oid 1.3.6.1.4.1.2636.3.17.1.1.1.3 ;
      type COUNTER ;
   }
   portDuplex  {
      oid .1.3.6.1.4.1.9.5.1.4.1.1.10 ;
      type INTEGER ;
   }
   portIfIndex {
      oid 1.3.6.1.4.1.9.5.1.4.1.1.11 ;
      type INTEGER ;
   }
   portName {
      oid 1.3.6.1.4.1.9.5.1.4.1.1.4 ;
      type STRING ;
   }
   rptrPortGroupIndex {
      oid 1.3.6.1.2.1.22.2.3.1.1.1 ;
      type INTEGER ;
   }
   rptrPortIndex {
      oid 1.3.6.1.2.1.22.2.3.1.1.2 ;
      type INTEGER ;
   }
   rptrPortRdblOctets {
      oid 1.3.6.1.2.1.22.2.3.1.1.4 ;
      type COUNTER ;
   }
   sonetLineIntrvlCVs {
      oid 1.3.6.1.2.1.10.39.1.3.2.1.4 ;
      type GAUGE ;
   }
   sonetLineIntrvlESs {
      oid 1.3.6.1.2.1.10.39.1.3.2.1.2 ;
      type GAUGE ;
   }
   sonetLineIntrvlSESs {
      oid 1.3.6.1.2.1.10.39.1.3.2.1.3 ;
      type GAUGE ;
   }
   sonetLineIntrvlUASs {
      oid 1.3.6.1.2.1.10.39.1.3.2.1.5 ;
      type GAUGE ;
   }
   sonetMediumType {
      oid 1.3.6.1.2.1.10.39.1.1.1.1.1 ;
      type INTEGER ;
   }
   sonetPathCurrentWidth {
      oid 1.3.6.1.2.1.10.39.2.1.1.1.1 ;
      type INTEGER ;
   }
   sonetPathIntrvlCVs {
      oid 1.3.6.1.2.1.10.39.2.1.2.1.4 ;
      type GAUGE ;
   }
   sonetPathIntrvlESs {
      oid 1.3.6.1.2.1.10.39.2.1.2.1.2 ;
      type GAUGE ;
   }
   sonetPathIntrvlSESs {
      oid 1.3.6.1.2.1.10.39.2.1.2.1.3 ;
      type GAUGE ;
   }
   sonetPathIntrvlUASs {
      oid 1.3.6.1.2.1.10.39.2.1.2.1.5 ;
      type GAUGE ;
   }
   sonetSectIntCVs {
      oid 1.3.6.1.2.1.10.39.1.2.2.1.5 ;
      type GAUGE ;
   }
   sonetSectIntESs {
      oid 1.3.6.1.2.1.10.39.1.2.2.1.2 ;
      type GAUGE ;
   }
   sonetSectIntSEFSs {
      oid 1.3.6.1.2.1.10.39.1.2.2.1.4 ;
      type GAUGE ;
   }
   sonetSectIntSESs {
      oid 1.3.6.1.2.1.10.39.1.2.2.1.3 ;
      type GAUGE ;
   }
   sysAttachType {
      oid 1.3.6.1.4.1.9.5.1.1.7 ;
      type INTEGER ;
   }
   sysContact {
      oid 1.3.6.1.2.1.1.4.0 ;
      type STRING ;
   }
   sysDescr {
      oid 1.3.6.1.2.1.1.1.0 ;
      type STRING ;
   }
   sysLocation {
      oid 1.3.6.1.2.1.1.6.0 ;
      type STRING ;
   }
   sysName {
      oid 1.3.6.1.2.1.1.5.0 ;
      type STRING ;
   }
   sysObjectID {
      oid 1.3.6.1.2.1.1.2.0 ;
      type OBJECTIDENTIFIER ;
   }
   sysUpTime {
      oid 1.3.6.1.2.1.1.3.0 ;
      type TIMETICKS ;
   }
   upsBatteryCapacity {
      oid 1.3.6.1.4.1.318.1.1.1.2.2.1 ;
      type GAUGE ;
   }
   upsBatteryTemp {
      oid 1.3.6.1.4.1.318.1.1.1.2.2.2 ;
      type GAUGE ;
   }
   upsEnvTemperature {
      oid 1.3.6.1.4.1.850.1.3.1.0 ;
      type INTEGER ;
   }
   upsIdentManufacturer {
      oid 1.3.6.1.2.1.33.1.1.1 ;
      type STRING ;
   }
   upsIdentModel {
      oid 1.3.6.1.2.1.33.1.1.2 ;
      type STRING ;
   }
   upsInputLineFreq {
      oid 1.3.6.1.4.1.318.1.1.1.3.2.4 ;
      type GAUGE ;
   }
   upsInputLineIndex {
      oid 1.3.6.1.2.1.33.1.3.3.1.1 ;
      type INTEGER ;
   }
   upsInputLineVolt {
      oid 1.3.6.1.4.1.318.1.1.1.3.2.1 ;
      type GAUGE ;
   }
   upsOutputCurrent {
      oid 1.3.6.1.4.1.318.1.1.1.4.2.4 ;
      type GAUGE ;
   }
   upsOutputLineFreq {
      oid 1.3.6.1.4.1.318.1.1.1.4.2.2 ;
      type GAUGE ;
   }
   upsOutputLineVolt {
      oid 1.3.6.1.4.1.318.1.1.1.4.2.1 ;
      type GAUGE ;
   }
   upsOutputLoad {
      oid 1.3.6.1.4.1.318.1.1.1.4.2.3 ;
      type GAUGE ;
   }
   vmVlan  {
       oid .1.3.6.1.4.1.9.9.68.1.2.2.1.2 ;
       type INTEGER ;
   }
  vtpVlanName {
      oid .1.3.6.1.4.1.9.9.46.1.3.1.1.4 ;
      type INTEGER ;
   }
}
