<?xml version='1.0' encoding='UTF-8'?>
<!-- This document was created with Syntext Serna Free. --><!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "docbookV4.2/docbookx.dtd" []>
<article>
  <title>The Netdot Manual</title>
  <articleinfo>
    <subtitle>Network Documentation Tool</subtitle>
    <releaseinfo>Version 0.9</releaseinfo>
    <legalnotice>
      <para>Copyright 2010 University of Oregon, all rights reserved.

</para>
      <para>This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

</para>
      <para>This program is distributed in the hope that it will be useful, but
WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTIBILITY
or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public
License for more details.

</para>
      <para>You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software Foundation,
Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
</para>
    </legalnotice>
  </articleinfo>
  <abstract>
    <para>This manual documents the installation, administration and operation of the Netdot application.  </para>
  </abstract>
  <section>
    <title>The Network Documentation Tool</title>
    <para><ulink url="http://netdot.uoregon.edu">Netdot</ulink> is an open source tool designed to help network administrators collect, organize and maintain network documentation.</para>
    <para>Netdot is actively developed by the <ulink url="http://ns.uoregon.edu">Network and Telecommunication Services</ulink> group of the <ulink url="http://www.uoregon.edu">University of Oregon</ulink>. </para>
    <para>Netdot features include:</para>
    <itemizedlist>
      <listitem>
        <para>Device discovery via SNMP</para>
      </listitem>
      <listitem>
        <para>Layer 2 topology discovery and graphing, using multiple sources of information: CDP+LLDP, Spanning Tree Protocol, switch forwarding tables, router point-to-point subnets.</para>
      </listitem>
      <listitem>
        <para>IPv4 and IPv6 address space management (also referred to  as <emphasis role="italic">IPAM</emphasis>), including hierarchical organization, address block visualization and IP and MAC address location and tracking.</para>
      </listitem>
      <listitem>
        <para>Cable plant information including: sites, rooms, jacks, closets, inter and intra-building fiber and copper wiring, circuits, etc.</para>
      </listitem>
      <listitem>
        <para>Contact information for related entities: departments, providers, vendors, BGP peers,  etc.</para>
      </listitem>
      <listitem>
        <para>Netdot can generate configuration files for various other tools, including: <ulink url="http://www.nagios.org">Nagios</ulink>, <ulink url="http://www.sysmon.org">Sysmon</ulink>, <ulink url="http://www.shrubbery.net/rancid">RANCID</ulink>, <ulink url="http://www.cacti.net">Cacti</ulink>.  Starting with version 0.9, Netdot  also generates zone files for ISC BIND and ISC DHCPD configurations.</para>
      </listitem>
      <listitem>
        <para>Starting with version 0.9, Netdot supports role-based access control, so tasks such as IP address management, switch port documentation and contact information maintenance can be delegated to specific groups with limited access to the web interface.</para>
      </listitem>
    </itemizedlist>
  </section>
  <section>
    <title>Structure</title>
    <para>Netdot consists of several components:</para>
    <orderedlist>
      <listitem>
        <para>The database</para>
        <para>Our goal has been to make Netdot database-agnostic as much as possible.  In principle, it should be able to use any database supported by Perl DBI.  There are, however, some limitations to this, for example, schema migration scripts are db-specific and may not always be available. Currently MySQL is fully supported.  There is currently partial support for PostgreSQL.</para>
      </listitem>
      <listitem>
        <para>The libraries</para>
        <para>The back-end code is a hierarchy of object-oriented Perl classes.  It can function as an API as well. One advantage of this model is that presentation, collection and database can be distributed among different physical machines.</para>
      </listitem>
      <listitem>
        <para>User Interface (UI)</para>
        <para>The web user interface is the main point of interaction with the tool.</para>
      </listitem>
      <listitem>
        <para>Command Line scripts (CLI)</para>
        <para>Certain tasks, like device discovery, DB maintenance, export scripts, etc., can be executed from the command line.  Therefore, these tasks can be automated by running them periodically via CRON.</para>
      </listitem>
    </orderedlist>
  </section>
  <section>
    <title>Installation</title>
    <section>
      <title>Requirements</title>
      <itemizedlist>
        <listitem>
          <para>Perl 5.6.1 or later</para>
        </listitem>
        <listitem>
          <para>Apache2 with mod_perl2</para>
        </listitem>
        <listitem>
          <para>MySQL (5.x preferred) or PostgreSQL (limited support)</para>
        </listitem>
        <listitem>
          <para>Authentication Server (optional).  Netdot supports local authentication, as well as Radius and LDAP.</para>
          <itemizedlist>
            <listitem>
              <para>For Radius, we recommend FreeRadius, available at:</para>
              <para><ulink url="http://www.freeradius.org"/></para>
            </listitem>
            <listitem>
              <para>For LDAP, you can try OpenLdap, available at:</para>
              <para><ulink url="http://www.openldap.org"/></para>
            </listitem>
          </itemizedlist>
        </listitem>
        <listitem>
          <para>The RRDtool package, including its Perl modules, available at:</para>
          <para><ulink url="http://oss.oetiker.ch/rrdtool/"/></para>
        </listitem>
        <listitem>
          <para>The GraphViz package, available at:</para>
          <para><ulink url="http://www.graphviz.org"/></para>
        </listitem>
        <listitem>
          <para>Various Perl modules.  To test for missing modules in your system, run:</para>
          <programlisting>%make testdeps</programlisting>
        </listitem>
        <listitem>
          <para>There are two ways to install the missing modules: The first (and the recommended) way is through package managers of your distribution.</para>
          <para>For systems with APT (e.g. Debian-based systems), run:</para>
          <programlisting>%make installdeps-apt-get</programlisting>
          <para>For systems with RPM (e.g. Red Hat), run:</para>
          <programlisting>%make installdeps-rpm</programlisting>
          <tip>
            <para>If you are still missing modules after running this step, you can complete the process by running the next step.</para>
          </tip>
        </listitem>
        <listitem>
          <para>Alternatively, you can install any missing modules automatically using the CPAN, by running:</para>
          <programlisting>%make installdeps</programlisting>
          <para>If you want to install modules individually, you can do this instead:</para>
          <programlisting>%perl -MCPAN -e shell
&gt;install Module::Blah</programlisting>
          <tip>
            <para>If you have problems installing Net::IRR, it is possible that the Net::TCP module cannot be installed.  There is an open bug and patch available at:</para>
            <para><ulink url="http://rt.cpan.org/Public/Bug/Display.html?id=43071"/></para>
          </tip>
        </listitem>
      </itemizedlist>
    </section>
    <section>
      <title>Configuration</title>
      <para>Netdot comes with a configuration file that you need to customize
to your needs.    You need to:</para>
      <programlisting>% cp etc/Default.conf etc/Site.conf</programlisting>
      <para>Then, modify Site.conf to reflect your specific options.  The original file contains descriptions of each configuration item.</para>
      <para><emphasis role="bold">Netdot will first read Default.conf and then Site.conf</emphasis></para>
      <para>The reason for keeping two files is that when an upgrade is performed, 
the Default.conf file can be re-written (to add new variables, etc.), without 
overwriting your site-specific configuration.</para>
    </section>
    <section>
      <title>Upgrading</title>
      <para>Netdot&apos;s database schema only changes between major versions.
For example, if upgrading from 0.8.x to 0.9.x, you will need to run an
upgrade script to adapt your current database to the new schema.  This can be usually accomplished by running this  command:</para>
      <programlisting>% make upgrade</programlisting>
      <para>  However, if upgrading from 0.8.X to 0.8.Y, it should suffice to run <emphasis role="italic">make install</emphasis> and restart Apache.  </para>
    </section>
    <section>
      <title>Installing the package for the first time</title>
      <itemizedlist>
        <listitem>
          <para>Make sure you have created the file <emphasis role="italic">etc/Site.conf</emphasis> with your configurations (See above).</para>
        </listitem>
        <listitem>
          <para>From the top directory in the package, do:</para>
          <programlisting>%make install [parameters]</programlisting>
          <para>Possible parameters include:</para>
          <programlisting>PREFIX=YOUR-PREFIX (default: /usr/local/netdot) 
APACHEUSER=USER-YOUR-APACHE-RUNS-AS (default: apache)
APACHEGROUP=GROUP-YOUR-APACHE-RUNS-AS (default: apache)
</programlisting>
        </listitem>
        <listitem>
          <para>You will then be ready to initialize the database. </para>
          <programlisting>%make installdb [parameters]</programlisting>
          <para>Remember you need to set <emphasis role="italic">DB_DBA</emphasis> and <emphasis role="italic">DB_DBA_PASSWORD</emphasis> to your database&apos;s admin username/password in <emphasis role="italic">etc/Site.conf</emphasis> before running this command.  Or if you prefer, you can specify the <emphasis role="italic">DB_DBA</emphasis> and <emphasis role="italic">DB_DBA_PASSWORD</emphasis> values as parameters (these are used by many functions in Netdot, they will need to be set to the correct value in <emphasis role="italic">etc/Site.conf</emphasis> eventually)</para>
          <programlisting>DB_DBA=DATABASE-ADMIN-ACCOUNT
DB_DBA_PASSWORD=DATABASE-ADMIN-PASSWORD</programlisting>
        </listitem>
      </itemizedlist>
      <section>
        <title>Apache Configuration</title>
        <para>Edit the supplied Apache config template for either Local,  Radius or LDAP authentication,  copy it to
  your Apache config directory and include it somewhere in your Apache configuration file (httpd.conf) (e.g.):</para>
        <programlisting>Include conf/netdot_apache2_&lt;local|radius|ldap&gt;.conf</programlisting>
        <para>Alternatively, some Apache environments provide a directory from which files are included automatically when Apache starts.  In that case, it&apos;s sufficient to copy the file into that directory, for example:</para>
        <programlisting># cp /usr/local/netdot/etc/netdot_apache2_radius.conf /etc/apache2/conf.d/</programlisting>
        <tip>
          <para>Make sure you use the version of the file that gets copied into your install directory by <emphasis role="italic">make install</emphasis>, not from the source directory.  This file contains relevant path substitutions based on your chosen install prefix.</para>
        </tip>
        <para>Once this is done, you can restart Apache2.  If you used the default settings, point your browser to:</para>
        <programlisting>http://servername.mydomain/netdot/</programlisting>
        <para>You should be able to log in with:</para>
        <programlisting>username: &quot;admin&quot;
password: &quot;admin&quot;</programlisting>
        <tip>
          <para>If you are using the Radius or LDAP authentication options, you should have NetdotRadiusFailToLocal or NetdotRadiusFailToLocal set to &quot;yes&quot; in your netdot_apache2_x.conf file.</para>
        </tip>
        <warning>
          <para>Please remember to change the &quot;admin&quot; password!</para>
        </warning>
      </section>
      <section>
        <title>CRON jobs</title>
        <para>Netdot comes with a few scripts that should be run periodically as cron jobs.</para>
        <itemizedlist>
          <listitem>
            <para>Retrieval of forwarding tables and ARP caches for IP/MAC address tracking</para>
          </listitem>
          <listitem>
            <para>Devices should be re-discovered via SNMP frequently to maintain an accurate 
   list of ports, ip addresses, etc.</para>
          </listitem>
          <listitem>
            <para>Rediscovery of network topology</para>
          </listitem>
          <listitem>
            <para>Netdot keeps history records for some objects every time they are updated.
   With time, old history should be deleted from the database to save disk space.</para>
          </listitem>
          <listitem>
            <para>Netdot can generate text documentation that is easy to find using simple
   grepping commands, for example, information about people, locations, 
   device port assignments, etc.  This documentation should be kept up to
   date by exporting it frequently.</para>
          </listitem>
          <listitem>
            <para>Configurations for external programs can be generated using Netdot data.
   Current supported programs include: Nagios, Sysmon and Rancid.</para>
          </listitem>
          <listitem>
            <para>The netdot.cron file included in the package is a sample crontab containing 
   recommended periodic jobs.  You should customize it to your liking and copy it to your cron directory, for example:</para>
            <programlisting># cp etc/netdot.cron /etc/cron.d/netdot</programlisting>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>
  <section>
    <title>Operation</title>
    <section>
      <title>Device Management</title>
      <para>Netdot can discover and maintain an extensive amount of information about network devices.  The easiest way to gather and store this information is by querying the devices using the Simple Network Management Protocol (SNMP).  Devices can be discovered individually, by subnet, or by providing a text file with a list of devices.</para>
      <section>
        <title>Device Discovery using the web UI</title>
        <para> Go to <emphasis role="italic">Management -&gt; Devices</emphasis>.  In the Tasks section, click on [new] and type the hostname or IP address of the device in question, along with the SNMP community and click [discover].  Netdot will then query the device using SNMP and present a window where you can assign an owner entity (for example, your organization), the entity that uses the device (for example, your customer), the location and a contact list.</para>
        <para>If you are discovering a layer 3 device with IP forwarding turned on (such as a router or firewall), Netdot will ask you if you would like to automatically create subnets, based on the IP configuration of the device interfaces.  This is a convenient way to add all your subnets into Netdot.</para>
        <para>Another option is to specify whether Netdot should assign any newly created subnets the same owner and user entities assigned to the device.</para>
        <para>Once you click the on [update] button, Netdot will show the discovery information and a link to the device page at the button.</para>
        <para>You can always re-discover a device manually by using the [snmp-update] button on the top right corner of the device page. For example, if you have added a new port adapter, new interface cards, or if the device has been replaced with a different unit. </para>
      </section>
      <section>
        <title>Device discovery using the command line interface (CLI)</title>
        <para>For brevity, let&apos;s assume you are located at the Netdot installation prefix, for example, <emphasis role="italic">/usr/local/netdot</emphasis>.</para>
        <para>You can discover a single device by executing:</para>
        <programlisting>bin/updatedevices.pl -H &lt;device-name&gt; -I -c &lt;community&gt;</programlisting>
        <para>You can also try discovering a whole subnet like this:</para>
        <programlisting>bin/updatedevices.pl -B 192.168.1.0/24 -I -c &lt;community&gt;</programlisting>
        <para>In addition, you can give Netdot a specific list of devices you would like to discover:</para>
        <programlisting>bin/updatedevices.pl -F &lt;text-file&gt; -I -c &lt;community&gt;</programlisting>
        <para>The file should contain a list of devices and their communities, separated by spaces, one device/community per line, for example:</para>
        <programlisting>device1 community1
device2 community1
device3 community2
...</programlisting>
        <para>Netdot can retrieve ARP caches and bridge forwarding tables.  You will probably want to fetch ARP caches from your layer 3 devices (i.e. routers and firewalls), and forwarding tables from your layer 2 devices (switches).  Examples:</para>
        <programlisting>bin/updatedevices.pl -H &lt;router&gt; -A -c &lt;community&gt;</programlisting>
        <programlisting>bin/updatedevices.pl -H &lt;switch&gt; -F -c &lt;community&gt;</programlisting>
        <para>Netdot can also try to discover the network topology.  For that, you need to run:</para>
        <programlisting>bin/updatedevices.pl -T</programlisting>
        <para>Ideally, once you have discovered all your devices, you should combine all this functionality and have it run periodically (e.g. every hour) via CRON.   A sample crontab entry would be:</para>
        <programlisting>0 * * * * root /usr/local/netdot/bin/updatedevices.pl -I -A -F -T</programlisting>
        <para>You will find some examples of cron jobs in the file named <emphasis role="italic">netdot.cron</emphasis></para>
      </section>
      <section>
        <title>Device Documentation</title>
        <para>Once you have created a device, you can go ahead and add more information about it. </para>
        <para>Going to <emphasis role="italic">Management -&gt; Devices</emphasis>  you can search for a device by name, IP or MAC address.  </para>
        <para>From the device page, you can navigate to the different sub-sections depending on the information you want to edit.  </para>
        <para> <emphasis role="underline">Interfaces</emphasis>:  Here you can edit interface descriptions, assign network jacks, etc. by clicking on the [edit] button.  You can also edit a specific interface by clicking on its number or on its name. If you are running topology discovery, you will probably see neighbor information.  If for some reason the topology discovery process cannot dectect a neighbor, you can add it manually by clicking on the [add] button in the neighbor column.  </para>
        <para>Manually adding a neighbor sets the &quot;Neighbor Fixed&quot; flag in the Interface object.  This flag prevents the topology discovery process from removing the neighbor relationship.</para>
        <tip>
          <para>Neighbor relationships tend to change frequently as hardware is replaced and connections are moved.  Therefore, fixed neighbor settings can become out of date pretty soon.  It is preferable to let the topology discovery process maintain neighbor relationships.</para>
        </tip>
      </section>
    </section>
    <section>
      <title>IP Address Space Management</title>
      <para>Netdot is a useful tool for IP address space management (referred to as <emphasis role="italic">IPAM</emphasis> these days).  Some key features are:</para>
      <itemizedlist>
        <listitem>
          <para>Address space is hierarchically organized through the use of a fast binary tree algorithm, which is the same technique used by routers when doing prefix lookups.</para>
        </listitem>
        <listitem>
          <para>IPv4 and IPv6 support</para>
        </listitem>
        <listitem>
          <para>New subnets can be automatically created based on the interface  information retrieved from routers and firewalls.  </para>
        </listitem>
        <listitem>
          <para>Easy visualization of used vs. available address space for easier allocations</para>
        </listitem>
      </itemizedlist>
      <section>
        <title>IP blocks</title>
        <para>IP objects are called IP blocks.  These objects can represent individual end-node addresses, as well as groups of addresses.  The distinguishing characteristic is the prefix attribute.  For example, an IPv4 block with a 32 bit prefix is an end-node address, while a block with a 24 prefix represents a group of 254 end-node addresses.</para>
        <para>Each address or block has a corresponding status.  Let&apos;s see those in detail.</para>
        <section>
          <title>IP block Status</title>
          <para>IP objects are assigned a status to better represent their nature.  Depending on whether the IP is an end address or a block, different status values can be assigned.</para>
          <para>The status of an end-node address can be one of:</para>
          <itemizedlist>
            <listitem>
              <para><emphasis role="underline">Static</emphasis>: These are addresses that have been statically assigned to hosts or device interfaces.  </para>
            </listitem>
            <listitem>
              <para><emphasis role="underline">Dynamic</emphasis>: Addresses that belong to a DHCP pool</para>
            </listitem>
            <listitem>
              <para><emphasis role="underline">Discovered</emphasis>: Addresses that have not been assigned as static or dynamic, but have been seen on the network (as part of ARP entries, for example).</para>
            </listitem>
            <listitem>
              <para><emphasis role="underline">Reserved</emphasis>: Addresses that should not be assigned</para>
            </listitem>
          </itemizedlist>
          <para>On the other hand, the status of an IP block can be one of:</para>
          <itemizedlist>
            <listitem>
              <para><emphasis role="underline">Container</emphasis>: This kind of block is meant to group or contain other blocks, such as Subnet blocks or other Container blocks.  For example, let&apos;s say your whole IPv4 address space is 192.168.0.0/16.  You also have partitioned this space into two /17 blocks, and from these blocks, you allocate subnets that you configure in your routers.  In this case, you would have:</para>
              <programlisting>192.168.0.0/16 -&gt; Container
    192.168.0.0/17  -&gt; Container
        192.168.0.1/24 -&gt; Subnet
        192.168.0.2/24 -&gt; Subnet
    192.168.128.0/17 -&gt; Container
        192.168.128.10/24 -&gt; Subnet
        192.168.128.20/24 -&gt; Subnet</programlisting>
            </listitem>
            <listitem>
              <para><emphasis role="underline">Subnet</emphasis>: This kind of block is meant to represent actual subnets that are configured on the interfaces of your layer 3 devices such as routers or firewalls.  Subnets usually contain the end-node addresses that you assign to your users.</para>
            </listitem>
            <listitem>
              <para><emphasis role="underline">Reserved</emphasis>: Similarly to reserved addresses, reserved blocks are not supposed to be allocated for whatever reason.</para>
            </listitem>
          </itemizedlist>
        </section>
      </section>
    </section>
    <section>
      <title>DNS</title>
      <para>Netdot can maintain DNS zone data. Zones can be exported as text files to be used by DNS server software.  Currently, only ISC BIND zone file exporting is supported.  </para>
      <tip>
        <para>The mechanisms by which zone files are transferred to and loaded by authoritative name servers are left to the administrator.  A simple way to do this is by running a name server locally in the machine that runs Netdot, and saving those zone files in the location where the software can load them periodically. A more complex setup could involve saving these files into revision control systems (CVS, SVN, etc), which could then be used by system configuration engines like Puppet or CfEngine to run syntax checks and load them into the appropriate name servers.</para>
      </tip>
      <para>Netdot supports the following DNS records: A, AAAA, CNAME, DS, HINFO, LOC, MX, NAPTR, SRV, and TXT.</para>
      <para>You can import your existing BIND zones into netdot with the help of the tool <emphasis role="italic">import_bind_zones.pl</emphasis> from the <emphasis role="italic">import</emphasis> subdirectory.  </para>
      <para>To add a new zone manually, go to <emphasis role="italic">Management -&gt; DNS Zones</emphasis> and click on [add].  You will see a new zone created with default values extracted from the configuration file.  </para>
      <para>Once a zone is created, it must be linked to an IP block (Subnet or Container).  You can do this by clicking on the [add] button of the IP blocks section in the zone page.  </para>
      <para>At this point, you can add new records by clicking on the [add] button on the Records section.  Records can also be added from other parts of the user interface, for example, from the IP address page, or the <emphasis role="italic">DNS Records</emphasis> page.</para>
      <para>Records can also be imported in bulk into the zone by clicking on the [import] button of the Records section and pasting the text from a BIND zone file into the text box.</para>
      <para>Each time the zone or its contents are modified, the transaction is added to a list of &quot;pending changes&quot;.  This list is used to determine when a zone needs to be exported. Zones can be exported manually via the UI by going to the Export menu, or via cron jobs. When a zone is exported, its serial number is increased and its list of pending changes is flushed.</para>
      <para>Netdot can auto-generate and maintain DNS records for IP addresses belonging to device interfaces, for example, routers.  The logic of how these names are generated is handed off to a plugin. In order to have Netdot generate DNS names for device IPs, set the &quot;Auto DNS&quot; option to &quot;yes&quot;  in the management section of the Device page.  From here, go to the IP Info tab for the same device and for each IP address, make sure that the interface it belongs to has the &quot;Auto DNS&quot; option set to &quot;yes&quot;.</para>
      <section>
        <title>The &apos;@&apos; record</title>
        <para>In Netdot, as in BIND, the &apos;@&apos; record symbolizes the domain.  In order to add records that apply to the domain itself, such as NS records, MX records, A records, etc. you must add the &apos;@&apos; name first.  Once this name is created, you can add NS, MX and A records to it, which will apply to the domain that the zone represents.</para>
      </section>
    </section>
    <section>
      <title>DHCP</title>
      <para>Netdot can maintain DHCP information and generate configurations for ISC DHCPD.</para>
      <para>DHCP information is organized hierarchically around the DHCP Scope object.  Netdot supports scopes of the following types: global, subnet, shared-subnet, group, and host. Each of these scopes can be assigned one or more attributes.  </para>
    </section>
    <section>
      <title>Global Scopes</title>
      <para>A global scope will represent a DHCP server (or a pair of failover servers).  Attributes in this scope are the default attributes inherited by all other scopes.  Attributes in more specific scopes override the global scope attributes.</para>
      <para>To create a new global scope, go to <emphasis role="italic">Management-&gt;DHCP</emphasis>.  Click on the [new] button.  Assign the scope a name (for example, the host name of your DHCP server) and select type &quot;global&quot;.  Global scopes are not contained by any other scope, so leave the Container field unselected.</para>
      <para>Once a scope is created, you can add attributes to it.  For example, click on the [attributes] button and then [add]. You will see a new page where you can create a new attribute.  Let&apos;s say, for example, that you want to add a list of name servers.  Type &quot;name-servers&quot; in the Name search box and click on &quot;List&quot;.  Select the &quot;domain-name-servers&quot; attribute name from the list and add a list of values.  Then click Insert.</para>
      <section>
        <title>Subnet Scopes</title>
        <para>Subnet scopes contain attributes that apply to all hosts within a subnet.  Subnet scopes are contained by a global scope. </para>
        <para>The easiest way to enable DHCP for a particular subnet is from within the Subnet page.  First, make sure that the subnet exists (you can create it manually or by discovering the router that serves that subnet). You can view the subnet by going to <emphasis role="italic">Management-&gt;Address Space</emphasis> and navigating to where the subnet is, or by simply searching for its address.</para>
        <para>Once in the subnet page, look for the <emphasis role="italic">Dhcp Scope</emphasis> section and click on [enable].  This will bring an input section where you can select the global scope and the routers option. By default, Netdot shows the first address of the subnet as the routers option value.  You can change this value if your router interface has a different address. Click Save.     You will now see the subnet scope listed in the Subnet page.  You can click on the scope name and that will take you to the DHCP Scope page, from which you can add any other necessary attributes.</para>
      </section>
      <section>
        <title>Host Scopes</title>
        <para>Host scopes allow you to assign attributes that apply to particular hosts. Host scopes also link a host&apos;s Ethernet address with its IP address.  </para>
        <para>You can create a new host scope from the host page.  First of all, a Static IP address object needs to exist.  You can create new static IP objects by selecting the desired address from the Subnet page.  Once the Static IP address is created, you need to give it name.  Look for the <emphasis role="italic">DNS A records</emphasis> section and click on [add].  Once you provide a name for the A record, you will be redirected to the host page.  Here, find the <emphasis role="italic">DHCP for &lt;IP address&gt;</emphasis> section and click on [add].  Type the Ethernet address and save your changes. When you click on the Ethernet address, you&apos;ll go to the MAC address page, which has a &quot;DHCP Scopes&quot; section.  Clicking on the IP address will take you to the DHCP scope page.  Here, you can add any specific attributes for that specific host.</para>
      </section>
      <section>
        <title>Template Scopes</title>
        <para>A template scope is not a real scope, but only a collection of attributes that you want to apply to things as a group.  For example, the DHCP host scope for an IP phone  may have one or more attributes that define where it should get its configuration from and other things.  You can create a template containing these attributes and then use that template each time you create a host scope for IP phones.</para>
      </section>
    </section>
    <section>
      <title>Contact Information</title>
      <para>Netdot uses the concept of &quot;Contact Lists&quot; to show contact information for different objects, for example devices, sites, entities (departments, providers, etc.). </para>
      <para>A Person object in Netdot contains a person&apos;s information, including location, e-mail address, phone numbers, pager numbers, etc.  </para>
      <para>Since a given person often times is the point of contact for different things, a person can have many &quot;roles&quot;, which link that person with a particular Contact List.</para>
      <para>You can create new Person, Entity, Site and Contact List objects by going to the Contacts section.</para>
    </section>
    <section>
      <title>Cable Plant</title>
      <para>Netdot allows you to document inter-building and intra-building fiber and copper wiring, closets, jacks, etc.</para>
    </section>
    <section>
      <title>Advanced DB operations</title>
      <para>The Advanced section of the top menu shows basic <emphasis role="italic">Browse</emphasis>, <emphasis role="italic">Search</emphasis> and <emphasis role="italic">Add</emphasis> operations on particular tables of the database.  This often requires certain familiarity with the database schema.  </para>
      <para>In this section you can also write your own SQL queries, which can be saved for future use.  SQL query output can also be saved in comma-separated (CSV) format.</para>
    </section>
    <section>
      <title>Reports</title>
      <para>The Reports section provides a number of useful types of reports.  </para>
      <section>
        <title>Device Reports</title>
        <section>
          <title>By Type/Model</title>
          <para>Lists devices grouped by type (switches, routers, servers, etc), then by model, and gives a total count per type and model.  </para>
          <section>
            <title>By Model/OS</title>
            <para>Lists devices by manufacturer, then model, showing each model&apos;s recommended OS version (which you would have had to previously specify) and all the other existing versions of that OS in your network, with counts.</para>
          </section>
          <section>
            <title>Device in Downtime</title>
            <para>Since Netdot can be used to export configurations for monitoring tools (e.g. Nagios), particular devices can be assigned a downtime period, which will exclude them from the monitoring tool during the time frame specified.  This report shows you all the devices that are within a downtime period.</para>
            <section>
              <title>Duplex Mismatches</title>
              <para>This report shows a list of neighboring device interfaces whose duplex settings are mismatched.</para>
            </section>
            <section>
              <title>OS mismatches</title>
              <para>This report lists devices whose operating system version differs from the recommended version.  The list is grouped by manufacturer, then model, then device name and it shows the current OS version.</para>
            </section>
          </section>
        </section>
      </section>
      <section>
        <title>IP Reports</title>
        <section>
          <title>Unused Subnets</title>
          <para>Here you will see a list of subnets that have no IP addresses.  You can select only IPv4 subnets or IPv6 subnets.</para>
        </section>
        <section>
          <title>Maxed out Subnets</title>
          <para>This report lists subnets that are used beyond a given threshold. This threshold is configurable by modifying  the SUBNET_USAGE_MINPERCENT item in the etc/Site.conf file</para>
        </section>
        <section>
          <title>Unused Static Addresses</title>
          <para>This report shows static addresses that have not been seen in the network for a given time.  This makes it easy to free up subnet address space.</para>
        </section>
      </section>
      <section>
        <title>MAC Addresses</title>
        <para>This report shows a list of MAC address OUIs, sorted by number of addresses.  You have the option to include all addresses, only MAC addresses belonging to infrastructure devices or only MAC addresses found in ARP caches and forwarding tables.</para>
      </section>
    </section>
    <section>
      <title>Exporting Configurations for External Programs</title>
      <para>You can use the exporter tool to generate text files that can be used as configurations for third-party tools and programs.</para>
      <para>The exporter tool is available in the web UI, under the <emphasis role="italic">Export</emphasis> tab.  Simply select one or more programs and click on the [submit] button.  Netdot will show some output from the exporter tool, including the paths to the new files.</para>
      <para>Additionally, the exporter can be called from the command line.  For example, to generate Nagios configurations:</para>
      <programlisting>bin/exporter.pl -t Nagios</programlisting>
      <para>Or you can export several in one call:</para>
      <programlisting>bin/exporter.pl -t Nagios,Sysmon,Rancid,BIND,DHCPD</programlisting>
      <para>There are specific export parameters for each of these which you can customize by editing your Site.conf file.</para>
    </section>
    <section>
      <title>Authorization</title>
      <para>Starting with version 0.9, netdot supports multi-level user access.  </para>
      <para>There are three types of users that correspond with levels of access in 
Netdot:</para>
      <itemizedlist>
        <listitem>
          <para>Admin: Full access to the UI and operations on objects.</para>
        </listitem>
        <listitem>
          <para>Operator: Full access to the UI, but read-only access to objects.</para>
        </listitem>
        <listitem>
          <para>User: Limited UI, with view, edit, and delete access to particular 
objects.  </para>
        </listitem>
      </itemizedlist>
      <section>
        <title>Assigning permissions to users</title>
        <para>Permissions can be assigned to individuals or to groups. Individuals are 
grouped in contact lists.  A user who is a member of a contact list 
inherits the permissions from the list.  However, the individual can 
have more specific permissions (or no permissions) if necessary.</para>
        <para>There is a limited number of objects which unprivileged users can gain 
access to:</para>
        <itemizedlist>
          <listitem>
            <para>DNS records: Users can create, modify and delete records from a 
certain zone.  Permissions can be given for the entire zone or for 
subsets of it, based on IP blocks.  For example, if a user is given 
view, edit and delete permissions to myzone.com, he or she can view, 
modify and remove any record from that zone.  On the other hand, if the 
zone covers hosts from a supernet, i.e. 10.0.0.0/16, and the user should 
only have control on records within a particular subnet, i.e. 
10.0.0.0/24, instead of assigning permissions on myzone.com, the 
administrator can assign view, edit and delete permissions on that 
particular subnet.
</para>
          </listitem>
          <listitem>
            <para>Device interfaces: Users can view port details such as number, name, 
vlan, room, jack, description and neighbor.  A user can only edit the 
room, jack and description fields. To assign permissions to a user on a 
list of devices, select the Device class and then select one or more 
devices to which the user can have access.</para>
          </listitem>
          <listitem>
            <para>Contact Lists: A user can add, modify and delete contacts from given 
contact lists.  </para>
          </listitem>
        </itemizedlist>
        <para>To assign permissions for an individual user, perform the following tasks:</para>
        <itemizedlist>
          <listitem>
            <para>Make sure there is a Person object for the user.  You can verify if a Person object exists by going to Contacts -&gt; People and searching for the person&apos;s name in the Search box.  If the object does not exist, you can create a new one by clicking on the [new] button on the upper right corner of the same window.</para>
          </listitem>
          <listitem>
            <para>Make sure that the person object has a Username and a User Type set.  If you have configured netdot to use Radius or LDAP authentication, make sure that the username corresponds with the login information in those central authentication systems.  If you are using local authentication instead, make sure that you set a local password using the Password field.</para>
          </listitem>
        </itemizedlist>
        <itemizedlist>
          <listitem>
            <para>On the Person page, you can add permissions by clicking on the [access_rights] button.  This will display current permissions.  You can now add new ones by clicking on the [add] button on the right.</para>
          </listitem>
          <listitem>
            <para>On the UserRight window, select the Object Class, the specific object or objects, and one or more access rights (view, edit, delete).  Only select the &apos;none&apos; right to revoke all permissions inherited from a group.  Click on &apos;Insert&apos;.</para>
          </listitem>
        </itemizedlist>
      </section>
    </section>
  </section>
</article>
