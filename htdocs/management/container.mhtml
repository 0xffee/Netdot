<%doc>
    Show a visual representation of the address space of the given container.
</%doc>

<%args>
$network
$rowsize         => 22
$dividefreespace => 'max'
</%args>


<%perl>
    my $mask = $network->prefix;
    my $network_addr = NetAddr::IP->new($network->address,$network->prefix); # the address of the start of the subnet

    my $minrowsize = $mask;
    my $maxrowsize;

    # set the visual size of the table on the screen:
    $rowsize = int($rowsize);

    # there should never be more /32's in the row than there are in the subnet
    $rowsize = ($rowsize>$mask?$rowsize:$mask);
    my $cellsperrow = 2**(32-$rowsize);

    my $maxmask = $rowsize + 10;
    $maxmask = $maxmask > 32 ? 32 : $maxmask;

    my @children = sort { $a->_netaddr <=> $b->_netaddr } $network->children;
    my @freespace = sort $network->free_space;

    ######################################################################
    ## Now output the HTML
    ######################################################################

    sub print_net_block {
        my ($class, $title, $width, $link, $cellsperrow) = @_;

        if ($width > $cellsperrow) {
            my $height = $width / $cellsperrow * 15;
            print <<EOF
<td title="$title"><a href="$link" class="$class" style="display: block; width: $cellsperrow; border: 0; height: $height"><table>
EOF
;
            for (my $i = 0; $i < $width / $cellsperrow; $i++) {
                print '<tr><td></td></tr>';
            }
            print '</table></a></td>';
        } else {
            print <<EOF
<td title="$title"><a href="$link" class="$class" style="display: block; width: $width; border: 0; height: 15px"></a></td>
EOF
        }
    }
    
    print "\n\n\n";
    print '<table class="ipcontainertable" style="width:' . ($cellsperrow+100) . ';" cellpadding="0" cellspacing="0"><tr class="outerrow"><td><table cellpadding="0" cellspacing="0" border="0">';

    my $count = 0;
    my $prevclass = "";
    my $needtr = 1;
    while (@children || @freespace) {
        my ($class, $title, $width, $link);
        if (!@children || $freespace[0] < $children[0]->_netaddr) {
            my $child = shift @freespace;
            $class = "ipaddr_available";
            if ($prevclass eq $class) { $class .= "_2"; }
            $title = "$child";
            $link = "ip.html?add_block=$child&_action=ADD_BLOCK";
            $width = 2**(32-$child->masklen);
            $count += $width;
            $prevclass = $class;
        } elsif (!@freespace || $freespace[0] > $children[0]->_netaddr) {
            my $child = shift @children;
            my $status = $child->status->name;
            $class = "ipaddr_" . lc($status);
            if ($prevclass eq $class) { $class .= "_2"; }
            $title = $child->_netaddr;
            $width = 2**(32-$title->masklen);
            $count += $width;
            $link = "ip.html?id=$child";
            $prevclass = $class;
        } else {
            print STDERR $freespace[0] . " " . $children[0]->_netaddr . "\n";
            die "SHOULD NOT HAPPEN";
        }

        if ($needtr) { 
            $needtr = 0;
            print '<tr class="outerrow"><td width="100">' . $title . '</td><td><table cellpadding="0" cellspacing="0"><tr>'; 
        }

        &print_net_block($class, $title, $width, $link, $cellsperrow);

        if ($count >= $cellsperrow) { 
            $needtr = 1;
            $count = 0;
            print '</tr></table></td></tr>';
        }
    }

    print "\n</tr></table></td></tr></table>";
    
</%perl>
