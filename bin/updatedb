#
# Make the necessary modifications to upgrade Netdot's schema and data
#
use strict;
use DBI;
use Data::Dumper;

use vars qw( $dbh $DEBUG $DB_TYPE $DB_HOME $DB_HOST $DB_PORT 
	     $DB_DBA $DB_DATABASE $DB_DBA_PASSWORD);


($DB_TYPE, $DB_HOME, $DB_HOST, $DB_PORT, $DB_DBA, $DB_DATABASE) = @ARGV;

# Be verbose by default
$DEBUG = 1;

if( ! dbconnect() ) {
  die "Failed to connect to DB\n";
}
&processdata();
&dbdisconnect();


##################################################
sub dbconnect {
    my $dsn = "dbi:$DB_TYPE:";
    
    if (($DB_TYPE eq 'Pg') || ($DB_TYPE eq 'mysql')) {
	$dsn .= "dbname=$DB_DATABASE";
	if ($DB_HOST) {
	    $dsn .= ";host=$DB_HOST";
	}
	if ($DB_PORT) {
	    $dsn .= ";port=$DB_PORT";
	}
    }else{
	print "Unknown DB type: $DB_TYPE\n";
	return 0;
    }
    
    print "DEBUG: init: $dsn\n" if $DEBUG;

    if( $dbh = DBI->connect( $dsn, $DB_DBA, $DB_DBA_PASSWORD ) ) {
	print "DEBUG: Connected successfully\n" if $DEBUG;
	return 1;
    } else {
	print "Unable to connect to $DB_TYPE $DB_DATABASE db:" 
	    . " $DBI::errstr\n"; 
	return 0;
    }
}


##################################################
sub dbdisconnect {
    if( $dbh->disconnect ) {
	print "DEBUG: Disconnected successfully\n" if $DEBUG;
	return 1;
    } else {
	warn "Unable to disconnect from DB\n";
	return 0;
    }
}


##################################################
sub processdata {
    
    &dbi_do('ALTER TABLE Device ADD COLUMN bgplocalas integer AFTER physaddr;',
	    'ALTER TABLE Device ADD COLUMN bgpid varchar(64) AFTER bgplocalas;',
	    'ALTER TABLE Device_history ADD COLUMN bgplocalas integer AFTER physaddr;',
	    'ALTER TABLE Device_history ADD COLUMN bgpid varchar(64) AFTER bgplocalas;',
	    'ALTER TABLE Device ADD COLUMN owner integer AFTER oobnumber;',
	    'ALTER TABLE Device_history ADD COLUMN owner integer AFTER oobnumber;',
	    'ALTER TABLE Device CHANGE COLUMN entity used_by integer;',
	    'ALTER TABLE Device_history CHANGE COLUMN entity used_by integer;',
	    'CREATE TABLE DeviceContacts ( 
                               id INT NOT NULL AUTO_INCREMENT,
			       device INT NOT NULL,
			       contactlist INT NOT NULL,
			       PRIMARY KEY (id) );',
	    'CREATE UNIQUE INDEX DeviceContacts1 ON DeviceContacts (device, contactlist);',
	    'ALTER TABLE Interface ADD COLUMN overwrite_descr tinyint AFTER description;',
	    'ALTER TABLE Interface_history ADD COLUMN overwrite_descr tinyint AFTER description;',
	    'ALTER TABLE Ipblock CHANGE COLUMN entity used_by integer;',
	    'ALTER TABLE Ipblock ADD COLUMN owner integer AFTER status;',
	    );
    
    # Migrate Device contacts
    # 
    my $devices = $dbh->prepare('SELECT id FROM Device');
    $devices->execute();
    
    while ( my $dev = $devices->fetchrow_hashref ){
	my $cls = $dbh->prepare("
                   SELECT contactlist, contactlist2
                   FROM Device
                   WHERE id = ?");
	
	$cls->execute($dev->{id});
	while ( my $cl = $cls->fetchrow_hashref ){
	    if ( $cl->{contactlist} ){
		&dbi_do("INSERT INTO DeviceContacts (device, contactlist) VALUES ('$dev->{id}', '$cl->{contactlist}')");
	    }
	    if ( $cl->{contactlist2} ){
		&dbi_do("INSERT INTO DeviceContacts (device, contactlist) VALUES ('$dev->{id}', '$cl->{contactlist2}')");
	    }
	};
    };
    
    # Remove the old fields
    &dbi_do('ALTER TABLE Device DROP COLUMN contactlist;',
	    'ALTER TABLE Device DROP COLUMN contactlist2;',
	    'ALTER TABLE Device_history DROP COLUMN contactlist;',
	    'ALTER TABLE Device_history DROP COLUMN contactlist2;',
	    );


    return 1;
}

##################################################
sub dbi_do{
    while (my $cmd = shift @_ ){
	$cmd  =~ /^(.*)$/;
	my $rows;
	$rows = $dbh->do( $cmd );
	print "DEBUG: ($cmd): rows affected: $rows\n" if $DEBUG;
    }
}
