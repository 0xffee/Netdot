#Updates netdot database from version 0.9 to version 1.0

use warnings;
use strict;
use lib "../lib";
use DBUTIL;
use Netdot;
use Netdot::Model;
use Netdot::Meta;
use Data::Dumper;

my %CONFIG;
$CONFIG{debug}             = 1;
$CONFIG{keep_history}      = 1;
$CONFIG{keep_dependencies} = 0;

my $dbh = &dbconnect();

my @statements;

@statements = (
"CREATE TABLE `asset` (
  `date_purchased` timestamp DEFAULT '1970-01-01 00:00:01',
  `id` bigint NOT NULL auto_increment,
  `info` blob,
  `inventory_number` varchar(255),
  `maint_contract` integer NOT NULL,
  `maint_from` date,
  `maint_until` date,
  `product_id` integer NOT NULL,
  `serial_number` varchar(255),
  `custom_serial` varchar(255),
  UNIQUE INDEX asset1 (`serial_number`, `product_id`),
  INDEX Asset2 (`product_id`),
  INDEX Asset3 (`inventory_number`),
  PRIMARY KEY (`id`)
) ENGINE=InnoDB;
",
    );

&processdata(\@statements);

# Store assets to be inserted, keyed by serial number
my %assets;

my $d = $dbh->prepare('SELECT serialnumber,custom_serial,inventorynumber,maint_contract,maint_from,maint_until,product 
                       FROM   device
		       WHERE  serialnumber is not NULL
    ');
$d->execute();
my $devices = $d->fetchall_arrayref();

foreach my $row ( @$devices ){
    my $sn = $row->[0];
    $sn =~ s/^\s*(\w+)\s*$/$1/;
    my $i = 1;
    foreach my $v (qw/cs in mc mf mu pr/){
	$assets{$sn}{$v} = $row->[$i];
	$i++;
    }
}

my $dm = $dbh->prepare('SELECT serialnumber,inventorynumber,maint_contract,maint_from,maint_until 
                        FROM   devicemodule
		        WHERE  serialnumber is not NULL
    ');
$dm->execute();
my $device_modules = $dm->fetchall_arrayref();

foreach my $row ( @$device_modules ){
    my $sn = $row->[0];
    $sn =~ s/^\s*(\w+)\s*$/$1/;
    next if exists $assets{$sn};
    my $i = 1;
    foreach my $v (qw/in mc mf mu/){
	$assets{$sn}{v} = $row->[$i];
	$i++;
    }
}

my $ia = $dbh->prepare('INSERT INTO asset (serial_number,custom_serial,inventory_number,maint_contract,maint_from,maint_until,product_id)
                        VALUES (?,?,?,?,?,?,?)');

foreach my $sn ( keys %assets ){
    my %vals = %{$assets{$sn}};
    my ($cs,$in,$mc,$mf,$mu,$pr) = @vals{'cs','in','mc','mf','mu','pr'};
    $mc ||= 0; $pr ||= 0;
    $ia->execute($sn,$cs,$in,$mc,$mf,$mu,$pr);
}


@statements = (
"ALTER TABLE device ADD COLUMN asset_id bigint NOT NULL AFTER aliases;",
"ALTER TABLE device_history ADD COLUMN asset_id bigint NOT NULL AFTER aliases;",
"ALTER TABLE devicemodule ADD COLUMN asset_id bigint NOT NULL FIRST;",
"UPDATE device,asset SET device.asset_id=asset.id WHERE asset.serial_number=device.serialnumber;",
"UPDATE devicemodule,asset SET devicemodule.asset_id=asset.id WHERE asset.serial_number=devicemodule.serialnumber;",
"UPDATE asset,device,devicemodule SET asset.product_id=device.product WHERE devicemodule.device=device.id AND devicemodule.asset_id=asset.id;",
"ALTER TABLE device DROP COLUMN serialnumber;",
"ALTER TABLE device DROP COLUMN inventorynumber;",
"ALTER TABLE device DROP COLUMN maint_contract;",
"ALTER TABLE device DROP COLUMN maint_from;",
"ALTER TABLE device DROP COLUMN maint_until;",
"ALTER TABLE device DROP COLUMN custom_serial;",
"ALTER TABLE device ADD INDEX Device13 (asset_id);",
"ALTER TABLE device_history DROP COLUMN serialnumber;",
"ALTER TABLE device_history DROP COLUMN inventorynumber;",
"ALTER TABLE device_history DROP COLUMN maint_contract;",
"ALTER TABLE device_history DROP COLUMN maint_from;",
"ALTER TABLE device_history DROP COLUMN maint_until;",
"ALTER TABLE device_history DROP COLUMN custom_serial;",
"ALTER TABLE devicemodule DROP COLUMN serialnumber;",
"ALTER TABLE devicemodule DROP COLUMN inventorynumber;",
"ALTER TABLE devicemodule DROP COLUMN maint_contract;",
"ALTER TABLE devicemodule DROP COLUMN maint_from;",
"ALTER TABLE devicemodule DROP COLUMN maint_until;",
"ALTER TABLE devicemodule ADD INDEX devicemodule2 (asset_id);",
"ALTER TABLE product ADD COLUMN mfg_number varchar(255);",
"ALTER TABLE datacache MODIFY COLUMN tstamp integer unsigned NOT NULL;",
"DELETE FROM datacache;",
"ALTER TABLE device ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
"ALTER TABLE device ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
"ALTER TABLE device_history ADD COLUMN snmp_conn_attempts integer AFTER snmp_bulk;",
"ALTER TABLE device_history ADD COLUMN snmp_down tinyint(1) NOT NULL AFTER snmp_conn_attempts;",
"ALTER TABLE rr ADD COLUMN created timestamp AFTER auto_update;",
"ALTER TABLE rr ADD COLUMN modified timestamp AFTER info;",
"ALTER TABLE rr ADD INDEX RR4 (`created`);",
"ALTER TABLE rr ADD INDEX RR5 (`modified`);",
"ALTER TABLE zone ADD COLUMN include blob AFTER id;",
);


# Change all table IDs and foreign keys to bigint (Ticket #737)
# Also, set them to NULLable and replace 0s with NULL values
my $meta = Netdot::Meta->new();
my @tables = $meta->get_tables(with_history=>1);

foreach my $mtable ( sort { $a->name cmp $b->name } @tables ){
    my $tname = lc($mtable->name);
    foreach my $mcol ( $mtable->get_columns ) {
	my $cname = $mcol->name;
	if ( $cname eq 'id' ){
	    push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint NOT NULL auto_increment;";
	}
	if ( $mcol->links_to ){
	    push @statements, "ALTER TABLE $tname MODIFY COLUMN $cname bigint;";
	    push @statements, "UPDATE $tname SET $cname=NULL WHERE $cname=0;";
	}
    }
}
# Exceptions
push @statements, "ALTER TABLE accessright MODIFY COLUMN object_id bigint NOT NULL;";


&processdata(\@statements);

##################   THIS HAS TO BE THE LAST THING   #######################
# Add FK constraints. 
my @schema = &generate_schema_from_metadata();
@statements = ('SET foreign_key_checks=0;');
my $fk_table;
foreach ( @schema ){
    if ( /^CREATE TABLE `(\S+)`/ ){
	$fk_table = $1;
    }elsif ( /CONSTRAINT/ ){
	$_ =~ s/^\s+//; # Remove leading spaces
	$_ =~ s/,$//;   # Remove last comma
	push @statements, "ALTER TABLE $fk_table ADD $_;";
    }
}
push @statements, 'SET foreign_key_checks=1;';

&processdata(\@statements);

&dbdisconnect();

