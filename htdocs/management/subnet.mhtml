<%doc>
    Show a list of all addresses within a subnet.

</%doc>

<%args>
$network
$user    => $ui->get_current_user($r)
</%args>

<%init>

my $BLOCK_MAX = Netdot->config->get('SUBNET_BLOCK_VIEW_MAX_PREFIX');
if ( $network->version == 4 && $network->prefix < $BLOCK_MAX ){
    print "This subnet is too big for the block view";
    $m->abort;
}elsif ( $network->version == 6 ){
    print "Block view not supported yet for IPv6 subnets";
    $m->abort;
}

my %used;
my %names;
my %status;
my %iplinks;
my @children; 
my $dbh = Netdot::Model->db_Main();
my $id = $network->id;
my $manager = $ui->get_permission_manager($r);

my $priv_user = 0;
if ( $manager && $manager->can($user, "access_section", 'subnet.mhtml:ip_add_link') ){
    $priv_user = 1;
}
</%init>

<%perl>

my $q = "SELECT   ipblock.id, ipblock.address, ipblock.description, ipblockstatus.name, rr.name, device.id
         FROM     ipblockstatus, ipblock 
                  LEFT OUTER JOIN (rr, rraddr) ON (ipblock.id=rraddr.ipblock AND rraddr.rr=rr.id)
                  LEFT OUTER JOIN (device, interface) ON ( ipblock.interface=interface.id AND interface.device=device.id)
         WHERE    ipblock.parent=$id
           AND    ipblock.status=ipblockstatus.id
         ORDER BY ipblock.address";

my $results = $dbh->selectall_arrayref($q);

foreach my $r ( @$results ){
    my ( $ipid, $address, $description, $status, $dnsname, $device ) = @$r;
    $used{$address}  = 1;
    $names{$address} = $status;  # default to show status first
    
    if( $status eq "Static" ) {
	if( $dnsname ) {
	    $names{$address} = $dnsname;
	}elsif( $device ){
	    if ( my $lbl = Device->retrieve($device)->get_label ) {
		$names{$address} = $lbl;
	    }
	}
    }else{
	$names{$address} = $description if ( $description ) ;
    }
    $status{$address}  = $status;
    $iplinks{$address} = $ipid;
}
#$m->abort;

my $net = NetAddr::IP->new($network->address, $network->prefix);
my $mask = $net->masklen;

my @headers = ( );
my @rows;
my $cols;

$net = $net->network();  # start printing from the first address, in case $net was not at the start of the subnet

if( $mask > 29 ) {
    # if there are 8 or less addresses in the subnet, show only that many columns
    $cols = $net->num()+1;
} elsif( $mask > 23 ) {
    # if there are 16-512 addresses, show them in 8 columns, and show the entire IPv4 address
    $cols = 8;
} else {
    # if there are more than 512 addresses, show 16 columns, and don't show the insignificant octets
    $cols = 16;
}

for( my $i=0; $i<(($net->num()+1)/$cols); $i++ ) {
    my @row = ();

    for( my $j=0; $j<$cols; $j++ ) {
	my $ipaddr = $net->addr;

	# this code hides the insignificant (unchanging) octets from the ip address based on the subnet
	if( $mask <= 7 ) {
	    # no insignificant octets
	    $ipaddr = $ipaddr;
	} elsif( $mask <= 15 ) {
	    # first octet is insignificant
	    $ipaddr = substr($ipaddr, index($ipaddr,".")+1);
	} elsif( $mask <= 23 ) {
	    # second octet is insignificant
	    $ipaddr = substr($ipaddr, index($ipaddr,".",index($ipaddr,".")+1)+1);
	} else {
	    # mask is 24 or bigger, show the entire ip address
	    $ipaddr = $ipaddr;
	}

	if ( $net == $net->network || $net == $net->broadcast ) {
	    # don't allow selection of network or broadcast addresses
	    if( $net == $net->network ) {
		$ipaddr = '<div class="ipaddr_disabled" title="Network">'.$ipaddr.'</div>';
	    } else {
		$ipaddr = '<div class="ipaddr_disabled" title="Broadcast">'.$ipaddr.'</div>';
	    }
	} elsif( exists $used{$net->numeric} ) {
	    my $divclass;
	    my $divtitle = $names{$net->numeric} if exists $names{$net->numeric};

	    if( $status{$net->numeric} eq "Static" ) {
		# show used addresses in red, show dns name on mouseover
		$divclass = "ipaddr_static";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>';

	    } elsif( $status{$net->numeric} eq "Dynamic" ) {
		# show dynamic addresses in orange, don't link
		$divclass = "ipaddr_dynamic";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>' if $priv_user;

	    } elsif( $status{$net->numeric} eq "Reserved" ) {
		# show reserved addresses in grey, don't link
		$divclass = "ipaddr_reserved";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>' if $priv_user;

	    } elsif( $status{$net->numeric} eq "Container" ) {
		# link to detail page for containers
		$divclass = "ipaddr_container";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>' if $priv_user;

	    } elsif( $status{$net->numeric} eq "Discovered" ) {
		$divclass = "ipaddr_discovered";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>';

	    } elsif( $status{$net->numeric} eq "Available" ) {
		$divclass = "ipaddr_available";
		$ipaddr = '<a href="ip.html?id='.$iplinks{$net->numeric}.'" class="ipaddr">'.$ipaddr.'</a>' if $priv_user;
	    }

	    $ipaddr = '<div class="'.$divclass.'" title="'.$divtitle.'" width="100%">'.$ipaddr.'</div>';

	} else {
	    if ( $priv_user ){
		# link this address to the "Add" section in ip.html
		$ipaddr = '<div class="ipaddr_available"><a href="ip.html?add_block_prefix='.$net->addr().'%2F32&add_block_parent='.$network->id.'&_action=ADD_BLOCK" class="ipaddr">'.$ipaddr.'</a></div>';
	    }else{
		$ipaddr = '<div class="ipaddr_available">'.$ipaddr.'</div>';
	    }
	}
	push( @row, $ipaddr );
	$net++;                      # increment the IP address
    }

    push( @rows, \@row );
}

</%perl>

<& /generic/data_table.mhtml, field_headers=>\@headers, data=>\@rows, subclass=>"ipb" &>
